package com.example.hakimjohnson97.connectfour;

import java.util.Scanner;

public class Connect4Bot {

    public static final int BOARD_X = 7;
    public static final int BOARD_Y = 6;

    public static final byte RED = 0;
    public static final byte YELLOW = 1;
    public static final byte EMPTY = 2;

    public static final int MAX_DEPTH = 4;
    public static final boolean BEST_MOVE_RED_ONLY = true;

    public static final int RATING_FOUR_IN_A_ROW = 1;
    public static final int RATING_FOUR_FACTOR = 1000;
    public static final float RATING_THREE_IN_A_ROW = 0.1f;
    public static final int VERY_NEGATIVE = -1000000;

    public int getNextMove(byte board[][]) {
        return GetNextMove(board);
    }

    static void DisplayBoard(byte board[][])
    {
        System.out.print("\nBoard\n");
        for (int i = 1; i <= BOARD_X; i++)
            System.out.print(i + " ");
        System.out.print("\n");
        for (int i = BOARD_Y-1; i >= 0; i--)    {
            for (int j = 0; j < BOARD_X; j++)    {
                if (board[j][i] == EMPTY)
                    System.out.print("- ");
                else if (board[j][i] == RED)
                    System.out.print("X ");
                else if (board[j][i] == YELLOW)
                    System.out.print("O ");
            }
            System.out.print("\n");
        }

        System.out.print("\n");
    }


    static void CopyBoard(byte source[][], byte dest[][])
    {
        for (int i = 0; i < BOARD_X; i++)
            for (int j = 0; j < BOARD_Y; j++)
                dest[i][j] = source[i][j];
    }

    static int AddBall(byte board[][], byte col, byte color)//first column is 0
    {
        int i;
        for (i = 0; i < BOARD_Y; i++)
            if (board[col][i] == EMPTY)   {
                board[col][i] = color;
                return i;
                //break;
            }
        //   DisplayBoard(board);
        // system("pause");
        return -1; //Error
    }

    static int RemoveBall(byte board[][], byte col)//first column is 0
    {
        int i;
        for (i = BOARD_Y-1; i >= 0; i--)
            if (board[col][i] == EMPTY)
                continue;
            else    {
                board[col][i] = EMPTY;
                return i;
            }
        return -1; //Error
    }

    //float inline CheckStrip(byte board[][BOARD_Y], bool precolor, int count, int x, int y, int dirx, int diry)
    public static float CHECK_STRIP(byte board[][], byte precolor, int count, int x, int y, int dirx, int diry) {
        float rating = 0;
        if (count >= 3) {
            if (precolor == RED)
                return RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW;
            else
                return -RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW;
        }
        else if (count >= 2) {
            int n = 0;
            if (x - (4 * dirx) >= 0 && y - (4 * diry) >= 0 && x - (4 * dirx) < BOARD_X && y - (4 * diry) < BOARD_Y) {
                if (board[x - 4 * dirx][y - 4 * diry] == EMPTY)
                    n++;
            }
            if (board[x][y] == EMPTY)
                n++;
            if (precolor == RED)
                rating += n * RATING_THREE_IN_A_ROW;
            else
                rating -= n * RATING_THREE_IN_A_ROW;
        }

        return rating;
    }

    static float Rate(byte board[][])
    {
        float rating = 0;
        int i, j, count;
        byte precolor;

        //Check horizontally
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (i = 0; i < BOARD_Y; i++)    {
            for (j = 0; j < BOARD_X; j++)    {
                //if (board[j][i] == EMPTY)
                //    continue;
                if (board[j][i] == precolor && board[j][i] != EMPTY)
                    count++;
                else    {
                    float temp = CHECK_STRIP(board, precolor, count, j, i, 1, 0);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[j][i];
            }
            float temp = CHECK_STRIP(board, precolor, count, j-1, i, 1, 0);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;
       /* if (count >= 3)    {
            if (precolor == RED)
                rating += RATING_FOUR_IN_A_ROW;
            else
                rating -= RATING_FOUR_IN_A_ROW;
        }
                else if (count >= 2)    {
                    int n = 0;
                    if (j-4 >= 0)    {
                        if (board[j-4][i] == EMPTY)
                            n++;
                    }
                    if (precolor == RED)
                        rating += n*RATING_THREE_IN_A_ROW;
                    else
                       rating -= n*RATING_THREE_IN_A_ROW;
                }*/
            count = 0;
            precolor = EMPTY;
        }

        //Check vertically
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (j = 0; j < BOARD_X; j++)    {
            for (i = 0; i < BOARD_Y; i++)    {
                // if (board[j][i] == EMPTY)
                //    continue;
                if (board[j][i] == precolor && board[j][i] != EMPTY)
                    count++;
                else    {
                    float temp = CHECK_STRIP(board, precolor, count, j, i, 0, 1);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[j][i];
            }

            float temp = CHECK_STRIP(board, precolor, count, j, i-1, 0, 1);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;

            count = 0;
            precolor = EMPTY;
        }
        //Check diagonally to the right
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (i = BOARD_Y-1; i >= 0; i--)    {
            for (j = 0; (j < BOARD_X && (i+j) < BOARD_Y); j++)    {
                if (board[j][i+j] == precolor && board[j][i+j] != EMPTY)
                    count++;
                else    {

                    float temp = CHECK_STRIP(board, precolor, count, j, i+j, 1, 1);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[j][i+j];
            }

            float temp = CHECK_STRIP(board, precolor, count, j-1, i+j-1, 1, 1);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;

            count = 0;
            precolor = EMPTY;
        }
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (j = 1; j < BOARD_X; j++)    {
            for (i = 0; (i < BOARD_Y && (i+j) < BOARD_X); i++)    {
                if (board[j+i][i] == precolor && board[j+i][i] != EMPTY)
                    count++;
                else    {

                    float temp = CHECK_STRIP(board, precolor, count, j+i, i, 1, 1);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[j+i][i];
            }

            float temp = CHECK_STRIP(board, precolor, count, j+i-1, i-1, 1, 1);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;

            count = 0;
            precolor = EMPTY;
        }

        //Check diagonally to the left
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (i = BOARD_Y-1; i >= 0; i--)    {
            for (j = 0; (j < BOARD_X && (i+j) < BOARD_Y); j++)    {
                if (board[BOARD_X-1-j][i+j] == precolor && board[BOARD_X-1-j][i+j] != EMPTY)
                    count++;
                else    {

                    float temp = CHECK_STRIP(board, precolor, count, BOARD_X-1-j, i+j, -1, 1);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[BOARD_X-1-j][i+j];
            }

            float temp = CHECK_STRIP(board, precolor, count, BOARD_X-1-(j-1), i+j-1, -1, 1);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;

            count = 0;
            precolor = EMPTY;
        }
        i = 0; j = 0; precolor = EMPTY; count = 0;
        for (j = BOARD_X-2; j >= 0; j--)    {
            for (i = 0; (i < BOARD_Y && (j-i) >= 0); i++)    {
                if (board[j-i][i] == precolor && board[j-i][i] != EMPTY)
                    count++;
                else    {

                    float temp = CHECK_STRIP(board, precolor, count, j-i, i, -1, 1);
                    if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                        return temp;
                    }
                    rating += temp;

                    count = 0;
                }
                precolor = board[j-i][i];
            }

            float temp = CHECK_STRIP(board, precolor, count, j-(i-1), i-1, -1, 1);
            if (Math.abs(temp) >= RATING_FOUR_FACTOR * RATING_FOUR_IN_A_ROW) {
                return temp;
            }
            rating += temp;

            // if (j-i < 0 || i < 0) {
            //      System.out.println("J: " + j + "I: " + i );
            // }
            count = 0;
            precolor = EMPTY;
        }


        return rating;

    }

    static float RateWithDepth(byte board[][], byte player) {
        return RateWithDepth(board, player, 1);
    }

    static float RateWithDepth(byte board[][], byte player, int depth)
    {
        float rating = 0;
        int y;
        float temp = Rate(board);

        if (temp >= RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR) {//NOTE this is to check for a winner, if rate function changes then CHeckForFours function should replace this
            //  cout << depth; DisplayBoard(board);system("pause");
            //DisplayBoard(board);
            //  system("pause");
            //cout << "Winner " << RATING_FOUR_IN_A_ROW << "\n";
            //  system("pause");
            return RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR;
        }
        else if (temp <= (-RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR))    {
            //   cout << "Duuude at depth" << depth << "\n"; DisplayBoard(board); system("pause");

            return -RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR;
        }

        if (depth >= MAX_DEPTH)    {
            //  float temp = Rate(board);
            //  float temp = 0;
            return temp;
        }

        int count = 0;
        boolean redCanWin = false; //This is if all yellow moves result in a win
        float max_rating = VERY_NEGATIVE;
        for (int i = 0; i < BOARD_X; i++)    {
            y = AddBall(board, (byte)i, player);
            if (y == -1) {
                //system("pause");//Full
                continue;
            }
            //   if (y == 0 && (i == 2 || i==3 || i==4)) {DisplayBoard(board); cout << i << "  " << y; system("pause");}//cout << "GOTCHA\n";
            temp = RateWithDepth(board, (player == 0 ? ((byte)1) : 0), depth+1);
            if (temp >= RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR)    {
                if (player == RED)    {
                    //DisplayBoard(board); system("pause");
                    board[i][y] = EMPTY;
                    return RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR;
                }
                else if (player == YELLOW)    {
                    redCanWin = true;
                    //  DisplayBoard(board); system("pause");
                    board[i][y] = EMPTY;
                    continue;
                }
            }
            else if (temp <= (-RATING_FOUR_IN_A_ROW*RATING_FOUR_FACTOR))    {
                if (player == YELLOW)    {
                    //         DisplayBoard(board); system("pause");
                    board[i][y] = EMPTY;
                    return -RATING_FOUR_IN_A_ROW;
                }
            }

            if (player == RED && BEST_MOVE_RED_ONLY)    {
                if (temp > max_rating)    {
                    max_rating = temp;
                }
            }
            else
                rating += temp;
            board[i][y] = EMPTY; //Remove Ball
            count++;
        }


        if (count > 0)    {
            if (player == RED && BEST_MOVE_RED_ONLY)
                return max_rating;
            else
                return rating/((float)count);
        }
        else    {
            if (redCanWin)    {
                // DisplayBoard(board);
                //  system("pause");
                return RATING_FOUR_IN_A_ROW;
            }
            return 0;
        }
        //return Rate(board);
    }

    static int GetNextMove(byte arg_board[][]) {
        return GetNextMove(arg_board, null);
    }

    static int GetNextMove(byte arg_board[][], float ratings[])
    {
        byte[][] board = new byte[BOARD_X][BOARD_Y];
        CopyBoard(arg_board, board);
        float rating = 0, max_rating = VERY_NEGATIVE;
        int max_rating_index = 0;
        int y;

        int count = 0;
        for (int i = 0; i < BOARD_X; i++)    {
            //  cout << "gBoard b4"; DisplayBoard(board);
            //    if (i == 3)
            //    DisplayBoard(board);
            y = AddBall(board, (byte)i, RED);
            if (y == -1)    {//Full
                if (ratings != null)
                    ratings[i] = VERY_NEGATIVE;
                continue;
            }
            //    if (i == 3)
            //    DisplayBoard(board);
            //   cout << Rate(board) << "fdssssdfsdfsdfsdfsdfsdfsdfsdfsdf\n";
            rating = RateWithDepth(board, YELLOW);

            //    if (i == 2) {
            //    DisplayBoard(board);
            //      cout << y << "duuuuuuuuude"; }
            board[i][y] = EMPTY; //Remove Ball
            if (rating > max_rating)    {
                max_rating = rating;
                max_rating_index = i;
            }
            count++;
            if (ratings != null)
                ratings[i] = rating;
            //  cout << "RATING FOR " << i << " is " << rating << "\n";
        }


        if (count > 0)
            return max_rating_index;
        else
            return -1; //No move
    }

    public static void mains(String args[]) {

        byte pboard[][] = new byte[BOARD_X][BOARD_Y];
        for (int i = 0; i < BOARD_X; i++)
            for (int j = 0; j < BOARD_Y; j++)
                pboard[i][j] = EMPTY;

        while (true) {

            //    System.out.print("\033[2J\033[1;1H");

            float ratings[] = new float[BOARD_X];

            int g = GetNextMove(pboard, ratings);
            AddBall(pboard, (byte) g, RED);

            DisplayBoard(pboard);

            System.out.println("Best move was " + (g + 1));

            for (int k = 0; k < BOARD_X; k++) {
                System.out.print("" + (k + 1) + ": " + ratings[k] + "\n");
            }


        }

    }

}